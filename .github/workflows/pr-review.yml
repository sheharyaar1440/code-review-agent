name: AI PR Review

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install ollama gitpython

      - name: Install and start Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh || { echo "Ollama install failed"; exit 1; }
          ollama serve &
          sleep 30
          curl -sSf http://127.0.0.1:11434 || { echo "Ollama server not running"; exit 1; }

      - name: Pull Code Llama Model
        run: |
          ollama pull codellama:7b-instruct || { echo "Model pull failed"; exit 1; }

      - name: Get PR Diff
        id: get-diff
        run: |
          git fetch origin
          DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }})
          {
            echo "PR_DIFF<<EOF"
            echo "$DIFF"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Run Code Review
        run: python review_pr.py --github > review.json

      - name: Post Review Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let body = '';
            try {
              const review = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'review.json'), 'utf8'));
              if (Array.isArray(review) && review.length > 0) {
                body += 'AI Review findings:\n\n';
                for (const item of review) {
                  const file = item.file || 'UNKNOWN';
                  const line = item.line || 1;
                  const comment = item.comment || '';
                  body += `- ${file}:${line} - ${comment}\n`;
                }
              } else {
                body = 'No actionable AI review comments found.';
              }
            } catch (e) {
              body = 'AI review failed to produce valid JSON.';
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
